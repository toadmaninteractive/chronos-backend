%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.4
%% DO NOT EDIT THIS FILE - it is machine generated

-module(ingestion_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("ingestion_protocol.hrl").

-export([
    ingestion_error_to_string/1,
    ingestion_error_from_string/1,
    ingestion_error_to_json/1,
    ingestion_error_from_json/1,
    ingested_log_entry_to_json/1,
    ingested_log_entry_from_json/1
]).

-export_type([
    ingestion_error/0,
    ingested_log_entry/0
]).

-type ingestion_error() :: 'invalid_app' | 'invalid_component' | 'invalid_branch' | 'invalid_version' | 'no_logs_to_ingest'.
-type ingested_log_entry() :: #ingested_log_entry{}.

-spec ingestion_error_to_string(ingestion_error()) -> binary().

ingestion_error_to_string(invalid_app) -> <<"invalid_app">>;
ingestion_error_to_string(invalid_component) -> <<"invalid_component">>;
ingestion_error_to_string(invalid_branch) -> <<"invalid_branch">>;
ingestion_error_to_string(invalid_version) -> <<"invalid_version">>;
ingestion_error_to_string(no_logs_to_ingest) -> <<"no_logs_to_ingest">>.

-spec ingestion_error_from_string(binary()) -> ingestion_error().

ingestion_error_from_string(<<"invalid_app">>) -> invalid_app;
ingestion_error_from_string(<<"invalid_component">>) -> invalid_component;
ingestion_error_from_string(<<"invalid_branch">>) -> invalid_branch;
ingestion_error_from_string(<<"invalid_version">>) -> invalid_version;
ingestion_error_from_string(<<"no_logs_to_ingest">>) -> no_logs_to_ingest.

-spec ingestion_error_to_json(ingestion_error()) -> igor_json:json_string().

ingestion_error_to_json(invalid_app) -> <<"invalid_app">>;
ingestion_error_to_json(invalid_component) -> <<"invalid_component">>;
ingestion_error_to_json(invalid_branch) -> <<"invalid_branch">>;
ingestion_error_to_json(invalid_version) -> <<"invalid_version">>;
ingestion_error_to_json(no_logs_to_ingest) -> <<"no_logs_to_ingest">>.

-spec ingestion_error_from_json(igor_json:json()) -> ingestion_error().

ingestion_error_from_json(<<"invalid_app">>) -> invalid_app;
ingestion_error_from_json(<<"invalid_component">>) -> invalid_component;
ingestion_error_from_json(<<"invalid_branch">>) -> invalid_branch;
ingestion_error_from_json(<<"invalid_version">>) -> invalid_version;
ingestion_error_from_json(<<"no_logs_to_ingest">>) -> no_logs_to_ingest.

-spec ingested_log_entry_to_json(ingested_log_entry()) -> igor_json:json_object().

ingested_log_entry_to_json(Record) ->
    #ingested_log_entry{
        level = Level,
        timestamp = Timestamp,
        data = Data,
        message = VarMessage,
        msg_count = MsgCount,
        seq_id = SeqId
    } = Record,
    ?assert(Level =/= undefined),
    ?assert(Timestamp =/= undefined),
    ?assert(Data =/= undefined),
    ?assert(VarMessage =/= undefined),
    ?assert(MsgCount =/= undefined),
    ?assert(SeqId =/= undefined),
    #{
        <<"level">> => igor_json:pack(Level, {custom, fun data_protocol:log_level_to_json/1}),
        <<"timestamp">> => igor_json:pack(Timestamp, {custom, fun web_types:datetime_to_text/1}),
        <<"data">> => igor_json:pack(Data, json),
        <<"message">> => igor_json:pack(VarMessage, string),
        <<"msg_count">> => igor_json:pack(MsgCount, int),
        <<"seq_id">> => igor_json:pack(SeqId, int)
    }.

-spec ingested_log_entry_from_json(igor_json:json_object()) -> ingested_log_entry().

ingested_log_entry_from_json(Json) ->
    Level = igor_json:parse(Json, <<"level">>, {custom, fun data_protocol:log_level_from_json/1}),
    Timestamp = igor_json:parse(Json, <<"timestamp">>, {custom, fun web_types:datetime_from_text/1}),
    Data = igor_json:parse(Json, <<"data">>, json),
    VarMessage = igor_json:parse(Json, <<"message">>, string),
    MsgCount = igor_json:parse(Json, <<"msg_count">>, int, 1),
    SeqId = igor_json:parse(Json, <<"seq_id">>, int, 1),
    #ingested_log_entry{
        level = Level,
        timestamp = Timestamp,
        data = Data,
        message = VarMessage,
        msg_count = MsgCount,
        seq_id = SeqId
    }.

