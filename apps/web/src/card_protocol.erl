%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.4
%% DO NOT EDIT THIS FILE - it is machine generated

-module(card_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("card_protocol.hrl").

-export([
    card_category_to_json/1,
    card_category_from_json/1,
    log_level_to_json/1,
    log_level_from_json/1,
    slack_receiver_kind_to_json/1,
    slack_receiver_kind_from_json/1,
    pdb_source_kind_to_json/1,
    pdb_source_kind_from_json/1,
    slack_receiver_to_json/1,
    slack_receiver_from_json/1,
    card_to_json/1,
    card_from_json/1,
    card_config_to_json/1,
    card_config_from_json/1,
    card_application_to_json/1,
    card_application_from_json/1,
    card_component_template_to_json/1,
    card_component_template_from_json/1,
    card_component_to_json/1,
    card_component_from_json/1,
    card_pdb_source_to_json/1,
    card_pdb_source_from_json/1
]).

-export_type([
    card_category/0,
    log_level/0,
    slack_receiver_kind/0,
    pdb_source_kind/0,
    slack_receiver/0,
    card/0,
    application_key/0,
    component_template_key/0,
    component_key/0,
    pdb_source_key/0,
    card_config/0,
    card_application/0,
    card_component_template/0,
    card_component/0,
    card_pdb_source/0
]).

-type card_category() :: 'config' | 'application' | 'component_template' | 'component' | 'pdb_source'.
-type log_level() :: 'trace' | 'debug' | 'info' | 'notice' | 'warning' | 'error' | 'fatal'.
-type slack_receiver_kind() :: 'channel' | 'person'.
-type pdb_source_kind() :: 'helios_api' | 'nginx_dir_index'.
-type slack_receiver() :: #slack_receiver{}.
-type card() :: card_protocol:card_config() | card_protocol:card_application() | card_protocol:card_component_template() | card_protocol:card_component() | card_protocol:card_pdb_source().
-type application_key() :: catalogue:key().
-type component_template_key() :: catalogue:key().
-type component_key() :: catalogue:key().
-type pdb_source_key() :: catalogue:key().
-type card_config() :: #card_config{}.
-type card_application() :: #card_application{}.
-type card_component_template() :: #card_component_template{}.
-type card_component() :: #card_component{}.
-type card_pdb_source() :: #card_pdb_source{}.

-spec card_category_to_json(card_category()) -> igor_json:json_string().

card_category_to_json(config) -> <<"config">>;
card_category_to_json(application) -> <<"application">>;
card_category_to_json(component_template) -> <<"component_template">>;
card_category_to_json(component) -> <<"component">>;
card_category_to_json(pdb_source) -> <<"pdb_source">>.

-spec card_category_from_json(igor_json:json()) -> card_category().

card_category_from_json(<<"config">>) -> config;
card_category_from_json(<<"application">>) -> application;
card_category_from_json(<<"component_template">>) -> component_template;
card_category_from_json(<<"component">>) -> component;
card_category_from_json(<<"pdb_source">>) -> pdb_source.

-spec log_level_to_json(log_level()) -> igor_json:json_string().

log_level_to_json(trace) -> <<"trace">>;
log_level_to_json(debug) -> <<"debug">>;
log_level_to_json(info) -> <<"info">>;
log_level_to_json(notice) -> <<"notice">>;
log_level_to_json(warning) -> <<"warning">>;
log_level_to_json(error) -> <<"error">>;
log_level_to_json(fatal) -> <<"fatal">>.

-spec log_level_from_json(igor_json:json()) -> log_level().

log_level_from_json(<<"trace">>) -> trace;
log_level_from_json(<<"debug">>) -> debug;
log_level_from_json(<<"info">>) -> info;
log_level_from_json(<<"notice">>) -> notice;
log_level_from_json(<<"warning">>) -> warning;
log_level_from_json(<<"error">>) -> error;
log_level_from_json(<<"fatal">>) -> fatal.

-spec slack_receiver_kind_to_json(slack_receiver_kind()) -> igor_json:json_string().

slack_receiver_kind_to_json(channel) -> <<"channel">>;
slack_receiver_kind_to_json(person) -> <<"person">>.

-spec slack_receiver_kind_from_json(igor_json:json()) -> slack_receiver_kind().

slack_receiver_kind_from_json(<<"channel">>) -> channel;
slack_receiver_kind_from_json(<<"person">>) -> person.

-spec pdb_source_kind_to_json(pdb_source_kind()) -> igor_json:json_string().

pdb_source_kind_to_json(helios_api) -> <<"helios_api">>;
pdb_source_kind_to_json(nginx_dir_index) -> <<"nginx_dir_index">>.

-spec pdb_source_kind_from_json(igor_json:json()) -> pdb_source_kind().

pdb_source_kind_from_json(<<"helios_api">>) -> helios_api;
pdb_source_kind_from_json(<<"nginx_dir_index">>) -> nginx_dir_index.

-spec slack_receiver_to_json(slack_receiver()) -> igor_json:json_object().

slack_receiver_to_json(Record) ->
    #slack_receiver{
        kind = Kind,
        title = Title,
        branch = Branch,
        min_log_level = MinLogLevel,
        throttle_sec = ThrottleSec
    } = Record,
    ?assert(Kind =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(MinLogLevel =/= undefined),
    ?assert(ThrottleSec =/= undefined),
    #{
        <<"kind">> => igor_json:pack(Kind, {custom, fun card_protocol:slack_receiver_kind_to_json/1}),
        <<"title">> => igor_json:pack(Title, string),
        <<"branch">> => igor_json:pack(Branch, string),
        <<"min_log_level">> => igor_json:pack(MinLogLevel, {custom, fun card_protocol:log_level_to_json/1}),
        <<"throttle_sec">> => igor_json:pack(ThrottleSec, int)
    }.

-spec slack_receiver_from_json(igor_json:json_object()) -> slack_receiver().

slack_receiver_from_json(Json) ->
    Kind = igor_json:parse(Json, <<"kind">>, {custom, fun card_protocol:slack_receiver_kind_from_json/1}),
    Title = igor_json:parse(Json, <<"title">>, string),
    Branch = igor_json:parse(Json, <<"branch">>, string, undefined),
    MinLogLevel = igor_json:parse(Json, <<"min_log_level">>, {custom, fun card_protocol:log_level_from_json/1}, error),
    ThrottleSec = igor_json:parse(Json, <<"throttle_sec">>, int),
    #slack_receiver{
        kind = Kind,
        title = Title,
        branch = Branch,
        min_log_level = MinLogLevel,
        throttle_sec = ThrottleSec
    }.

-spec card_to_json(card()) -> igor_json:json_object().

card_to_json(Record) when is_record(Record, card_config) ->
    card_config_to_json(Record);
card_to_json(Record) when is_record(Record, card_application) ->
    card_application_to_json(Record);
card_to_json(Record) when is_record(Record, card_component_template) ->
    card_component_template_to_json(Record);
card_to_json(Record) when is_record(Record, card_component) ->
    card_component_to_json(Record);
card_to_json(Record) when is_record(Record, card_pdb_source) ->
    card_pdb_source_to_json(Record).

-spec card_from_json(igor_json:json_object()) -> card().

card_from_json(Json) ->
    Tag = igor_json:parse(Json, <<"category">>, {custom, fun card_protocol:card_category_from_json/1}),
    case Tag of
        config ->
            card_config_from_json(Json);
        application ->
            card_application_from_json(Json);
        component_template ->
            card_component_template_from_json(Json);
        component ->
            card_component_from_json(Json);
        pdb_source ->
            card_pdb_source_from_json(Json)
    end.

-spec card_config_to_json(card_config()) -> igor_json:json_object().

card_config_to_json(Record) ->
    #card_config{id = Id, applications = Applications, log_lifetime_days = LogLifetimeDays} = Record,
    ?assert(Id =/= undefined),
    ?assert(Applications =/= undefined),
    ?assert(LogLifetimeDays =/= undefined),
    #{
        <<"category">> => igor_json:pack(config, {custom, fun card_protocol:card_category_to_json/1}),
        <<"_id">> => igor_json:pack(Id, atom),
        <<"applications">> => igor_json:pack(Applications, {list, atom}),
        <<"log_lifetime_days">> => igor_json:pack(LogLifetimeDays, int)
    }.

-spec card_config_from_json(igor_json:json_object()) -> card_config().

card_config_from_json(Json) ->
    Id = igor_json:parse(Json, <<"_id">>, atom),
    Applications = igor_json:parse(Json, <<"applications">>, {list, atom}),
    LogLifetimeDays = igor_json:parse(Json, <<"log_lifetime_days">>, int, 60),
    #card_config{id = Id, applications = Applications, log_lifetime_days = LogLifetimeDays}.

-spec card_application_to_json(card_application()) -> igor_json:json_object().

card_application_to_json(Record) ->
    #card_application{
        id = Id,
        name = Name,
        key = VarKey,
        components = Components,
        log_lifetime_days = LogLifetimeDays,
        default_pdb_source = DefaultPdbSource,
        pdb_sources = PdbSources
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(Components =/= undefined),
    ?assert(LogLifetimeDays =/= undefined),
    #{
        <<"category">> => igor_json:pack(application, {custom, fun card_protocol:card_category_to_json/1}),
        <<"_id">> => igor_json:pack(Id, atom),
        <<"name">> => igor_json:pack(Name, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"components">> => igor_json:pack(Components, {list, atom}),
        <<"log_lifetime_days">> => igor_json:pack(LogLifetimeDays, int),
        <<"default_pdb_source">> => igor_json:pack(DefaultPdbSource, atom),
        <<"pdb_sources">> => igor_json:pack(PdbSources, {dict, string, atom})
    }.

-spec card_application_from_json(igor_json:json_object()) -> card_application().

card_application_from_json(Json) ->
    Id = igor_json:parse(Json, <<"_id">>, atom),
    Name = igor_json:parse(Json, <<"name">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    Components = igor_json:parse(Json, <<"components">>, {list, atom}, []),
    LogLifetimeDays = igor_json:parse(Json, <<"log_lifetime_days">>, int, 60),
    DefaultPdbSource = igor_json:parse(Json, <<"default_pdb_source">>, atom, undefined),
    PdbSources = igor_json:parse(Json, <<"pdb_sources">>, {dict, string, atom}, undefined),
    #card_application{
        id = Id,
        name = Name,
        key = VarKey,
        components = Components,
        log_lifetime_days = LogLifetimeDays,
        default_pdb_source = DefaultPdbSource,
        pdb_sources = PdbSources
    }.

-spec card_component_template_to_json(card_component_template()) -> igor_json:json_object().

card_component_template_to_json(Record) ->
    #card_component_template{id = Id, collapse_fields = CollapseFields, default_metadata_fields = DefaultMetadataFields} = Record,
    ?assert(Id =/= undefined),
    ?assert(CollapseFields =/= undefined),
    ?assert(DefaultMetadataFields =/= undefined),
    #{
        <<"category">> => igor_json:pack(component_template, {custom, fun card_protocol:card_category_to_json/1}),
        <<"_id">> => igor_json:pack(Id, atom),
        <<"collapse_fields">> => igor_json:pack(CollapseFields, {list, string}),
        <<"default_metadata_fields">> => igor_json:pack(DefaultMetadataFields, {list, string})
    }.

-spec card_component_template_from_json(igor_json:json_object()) -> card_component_template().

card_component_template_from_json(Json) ->
    Id = igor_json:parse(Json, <<"_id">>, atom),
    CollapseFields = igor_json:parse(Json, <<"collapse_fields">>, {list, string}, []),
    DefaultMetadataFields = igor_json:parse(Json, <<"default_metadata_fields">>, {list, string}, []),
    #card_component_template{id = Id, collapse_fields = CollapseFields, default_metadata_fields = DefaultMetadataFields}.

-spec card_component_to_json(card_component()) -> igor_json:json_object().

card_component_to_json(Record) ->
    #card_component{
        id = Id,
        name = Name,
        key = VarKey,
        template = Template,
        slack_receivers = SlackReceivers
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(Template =/= undefined),
    ?assert(SlackReceivers =/= undefined),
    #{
        <<"category">> => igor_json:pack(component, {custom, fun card_protocol:card_category_to_json/1}),
        <<"_id">> => igor_json:pack(Id, atom),
        <<"name">> => igor_json:pack(Name, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"template">> => igor_json:pack(Template, atom),
        <<"slack_receivers">> => igor_json:pack(SlackReceivers, {list, {custom, fun card_protocol:slack_receiver_to_json/1}})
    }.

-spec card_component_from_json(igor_json:json_object()) -> card_component().

card_component_from_json(Json) ->
    Id = igor_json:parse(Json, <<"_id">>, atom),
    Name = igor_json:parse(Json, <<"name">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    Template = igor_json:parse(Json, <<"template">>, atom),
    SlackReceivers = igor_json:parse(Json, <<"slack_receivers">>, {list, {custom, fun card_protocol:slack_receiver_from_json/1}}, []),
    #card_component{
        id = Id,
        name = Name,
        key = VarKey,
        template = Template,
        slack_receivers = SlackReceivers
    }.

-spec card_pdb_source_to_json(card_pdb_source()) -> igor_json:json_object().

card_pdb_source_to_json(Record) ->
    #card_pdb_source{
        id = Id,
        name = Name,
        key = VarKey,
        source = Source,
        url = Url,
        auth_header = AuthHeader,
        auth_header_value = AuthHeaderValue
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(Source =/= undefined),
    ?assert(Url =/= undefined),
    #{
        <<"category">> => igor_json:pack(pdb_source, {custom, fun card_protocol:card_category_to_json/1}),
        <<"_id">> => igor_json:pack(Id, atom),
        <<"name">> => igor_json:pack(Name, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"source">> => igor_json:pack(Source, {custom, fun card_protocol:pdb_source_kind_to_json/1}),
        <<"url">> => igor_json:pack(Url, string),
        <<"auth_header">> => igor_json:pack(AuthHeader, string),
        <<"auth_header_value">> => igor_json:pack(AuthHeaderValue, string)
    }.

-spec card_pdb_source_from_json(igor_json:json_object()) -> card_pdb_source().

card_pdb_source_from_json(Json) ->
    Id = igor_json:parse(Json, <<"_id">>, atom),
    Name = igor_json:parse(Json, <<"name">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    Source = igor_json:parse(Json, <<"source">>, {custom, fun card_protocol:pdb_source_kind_from_json/1}),
    Url = igor_json:parse(Json, <<"url">>, string),
    AuthHeader = igor_json:parse(Json, <<"auth_header">>, string, undefined),
    AuthHeaderValue = igor_json:parse(Json, <<"auth_header_value">>, string, undefined),
    #card_pdb_source{
        id = Id,
        name = Name,
        key = VarKey,
        source = Source,
        url = Url,
        auth_header = AuthHeader,
        auth_header_value = AuthHeaderValue
    }.

