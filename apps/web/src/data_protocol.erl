%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.4
%% DO NOT EDIT THIS FILE - it is machine generated

-module(data_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("data_protocol.hrl").

-export([
    log_level_to_integer/1,
    log_level_from_integer/1,
    log_level_to_string/1,
    log_level_from_string/1,
    log_level_to_iodata/1,
    log_level_from_binary/1,
    log_level_to_json/1,
    log_level_from_json/1,
    bin_unit_to_string/1,
    bin_unit_from_string/1,
    bin_unit_to_json/1,
    bin_unit_from_json/1,
    order_direction_to_string/1,
    order_direction_from_string/1,
    order_direction_to_json/1,
    order_direction_from_json/1,
    collection_to_json/2,
    collection_from_json/2,
    collection_slice_to_json/2,
    collection_slice_from_json/2,
    generic_response_to_json/1,
    generic_response_from_json/1,
    bad_request_error_to_json/2,
    bad_request_error_from_json/2,
    unauthorized_error_to_json/1,
    unauthorized_error_from_json/1,
    forbidden_error_to_json/1,
    forbidden_error_from_json/1,
    forbidden_error_ex_to_json/2,
    forbidden_error_ex_from_json/2,
    not_found_error_to_json/1,
    not_found_error_from_json/1,
    internal_server_error_to_json/1,
    internal_server_error_from_json/1,
    not_implemented_error_to_json/1,
    not_implemented_error_from_json/1
]).

-export_type([
    log_level/0,
    bin_unit/0,
    order_direction/0,
    collection/1,
    collection_slice/1,
    generic_response/0,
    bad_request_error/1,
    unauthorized_error/0,
    forbidden_error/0,
    forbidden_error_ex/1,
    not_found_error/0,
    internal_server_error/0,
    not_implemented_error/0
]).

-type log_level() :: 'trace' | 'debug' | 'info' | 'notice' | 'warning' | 'error' | 'fatal'.
-type bin_unit() :: 'msec' | 'sec' | 'min' | 'hour' | 'day'.
-type order_direction() :: 'asc' | 'desc'.
-type collection(_T) :: #collection{}.
-type collection_slice(_T) :: #collection_slice{}.
-type generic_response() :: #generic_response{}.
-type bad_request_error(_T) :: #bad_request_error{}.
-type unauthorized_error() :: #unauthorized_error{}.
-type forbidden_error() :: #forbidden_error{}.
-type forbidden_error_ex(_T) :: #forbidden_error_ex{}.
-type not_found_error() :: #not_found_error{}.
-type internal_server_error() :: #internal_server_error{}.
-type not_implemented_error() :: #not_implemented_error{}.

-spec log_level_to_integer(log_level()) -> byte().

log_level_to_integer(trace) -> 1;
log_level_to_integer(debug) -> 2;
log_level_to_integer(info) -> 3;
log_level_to_integer(notice) -> 4;
log_level_to_integer(warning) -> 5;
log_level_to_integer(error) -> 6;
log_level_to_integer(fatal) -> 7.

-spec log_level_from_integer(byte()) -> log_level().

log_level_from_integer(1) -> trace;
log_level_from_integer(2) -> debug;
log_level_from_integer(3) -> info;
log_level_from_integer(4) -> notice;
log_level_from_integer(5) -> warning;
log_level_from_integer(6) -> error;
log_level_from_integer(7) -> fatal.

-spec log_level_to_string(log_level()) -> binary().

log_level_to_string(trace) -> <<"trace">>;
log_level_to_string(debug) -> <<"debug">>;
log_level_to_string(info) -> <<"info">>;
log_level_to_string(notice) -> <<"notice">>;
log_level_to_string(warning) -> <<"warning">>;
log_level_to_string(error) -> <<"error">>;
log_level_to_string(fatal) -> <<"fatal">>.

-spec log_level_from_string(binary()) -> log_level().

log_level_from_string(<<"trace">>) -> trace;
log_level_from_string(<<"debug">>) -> debug;
log_level_from_string(<<"info">>) -> info;
log_level_from_string(<<"notice">>) -> notice;
log_level_from_string(<<"warning">>) -> warning;
log_level_from_string(<<"error">>) -> error;
log_level_from_string(<<"fatal">>) -> fatal.

-spec log_level_to_iodata(log_level()) -> iodata().

log_level_to_iodata(Enum) ->
    igor_binary:pack_value(log_level_to_integer(Enum), byte).

-spec log_level_from_binary(binary()) -> {log_level(), binary()}.

log_level_from_binary(Binary) ->
    {Int, Tail} = igor_binary:parse_value(Binary, byte),
    {log_level_from_integer(Int), Tail}.

-spec log_level_to_json(log_level()) -> igor_json:json_string().

log_level_to_json(trace) -> <<"trace">>;
log_level_to_json(debug) -> <<"debug">>;
log_level_to_json(info) -> <<"info">>;
log_level_to_json(notice) -> <<"notice">>;
log_level_to_json(warning) -> <<"warning">>;
log_level_to_json(error) -> <<"error">>;
log_level_to_json(fatal) -> <<"fatal">>.

-spec log_level_from_json(igor_json:json()) -> log_level().

log_level_from_json(<<"trace">>) -> trace;
log_level_from_json(<<"debug">>) -> debug;
log_level_from_json(<<"info">>) -> info;
log_level_from_json(<<"notice">>) -> notice;
log_level_from_json(<<"warning">>) -> warning;
log_level_from_json(<<"error">>) -> error;
log_level_from_json(<<"fatal">>) -> fatal.

-spec bin_unit_to_string(bin_unit()) -> binary().

bin_unit_to_string(msec) -> <<"msec">>;
bin_unit_to_string(sec) -> <<"sec">>;
bin_unit_to_string(min) -> <<"min">>;
bin_unit_to_string(hour) -> <<"hour">>;
bin_unit_to_string(day) -> <<"day">>.

-spec bin_unit_from_string(binary()) -> bin_unit().

bin_unit_from_string(<<"msec">>) -> msec;
bin_unit_from_string(<<"sec">>) -> sec;
bin_unit_from_string(<<"min">>) -> min;
bin_unit_from_string(<<"hour">>) -> hour;
bin_unit_from_string(<<"day">>) -> day.

-spec bin_unit_to_json(bin_unit()) -> igor_json:json_string().

bin_unit_to_json(msec) -> <<"msec">>;
bin_unit_to_json(sec) -> <<"sec">>;
bin_unit_to_json(min) -> <<"min">>;
bin_unit_to_json(hour) -> <<"hour">>;
bin_unit_to_json(day) -> <<"day">>.

-spec bin_unit_from_json(igor_json:json()) -> bin_unit().

bin_unit_from_json(<<"msec">>) -> msec;
bin_unit_from_json(<<"sec">>) -> sec;
bin_unit_from_json(<<"min">>) -> min;
bin_unit_from_json(<<"hour">>) -> hour;
bin_unit_from_json(<<"day">>) -> day.

-spec order_direction_to_string(order_direction()) -> binary().

order_direction_to_string(asc) -> <<"asc">>;
order_direction_to_string(desc) -> <<"desc">>.

-spec order_direction_from_string(binary()) -> order_direction().

order_direction_from_string(<<"asc">>) -> asc;
order_direction_from_string(<<"desc">>) -> desc.

-spec order_direction_to_json(order_direction()) -> igor_json:json_string().

order_direction_to_json(asc) -> <<"asc">>;
order_direction_to_json(desc) -> <<"desc">>.

-spec order_direction_from_json(igor_json:json()) -> order_direction().

order_direction_from_json(<<"asc">>) -> asc;
order_direction_from_json(<<"desc">>) -> desc.

-spec collection_to_json(collection(T), igor_json:pack_type(T)) -> igor_json:json_object().

collection_to_json(Record, T) ->
    #collection{items = Items} = Record,
    ?assert(Items =/= undefined),
    #{
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec collection_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> collection(T).

collection_from_json(Json, T) ->
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #collection{items = Items}.

-spec collection_slice_to_json(collection_slice(T), igor_json:pack_type(T)) -> igor_json:json_object().

collection_slice_to_json(Record, T) ->
    #collection_slice{total = Total, items = Items} = Record,
    ?assert(Total =/= undefined),
    ?assert(Items =/= undefined),
    #{
        <<"total">> => igor_json:pack(Total, int),
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec collection_slice_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> collection_slice(T).

collection_slice_from_json(Json, T) ->
    Total = igor_json:parse(Json, <<"total">>, int),
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #collection_slice{total = Total, items = Items}.

-spec generic_response_to_json(generic_response()) -> igor_json:json_object().

generic_response_to_json(Record) ->
    #generic_response{result = VarResult} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean)
    }.

-spec generic_response_from_json(igor_json:json_object()) -> generic_response().

generic_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    #generic_response{result = VarResult}.

-spec bad_request_error_to_json(bad_request_error(T), igor_json:pack_type(T)) -> igor_json:json_object().

bad_request_error_to_json(Record, T) ->
    #bad_request_error{reason = VarReason} = Record,
    ?assert(VarReason =/= undefined),
    #{
        <<"reason">> => igor_json:pack(VarReason, T)
    }.

-spec bad_request_error_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> bad_request_error(T).

bad_request_error_from_json(Json, T) ->
    VarReason = igor_json:parse(Json, <<"reason">>, T),
    #bad_request_error{reason = VarReason}.

-spec unauthorized_error_to_json(unauthorized_error()) -> igor_json:json_object().

unauthorized_error_to_json(#unauthorized_error{}) -> #{}.

-spec unauthorized_error_from_json(igor_json:json_object()) -> unauthorized_error().

unauthorized_error_from_json(_Json) -> #unauthorized_error{}.

-spec forbidden_error_to_json(forbidden_error()) -> igor_json:json_object().

forbidden_error_to_json(#forbidden_error{}) -> #{}.

-spec forbidden_error_from_json(igor_json:json_object()) -> forbidden_error().

forbidden_error_from_json(_Json) -> #forbidden_error{}.

-spec forbidden_error_ex_to_json(forbidden_error_ex(T), igor_json:pack_type(T)) -> igor_json:json_object().

forbidden_error_ex_to_json(Record, T) ->
    #forbidden_error_ex{reason = VarReason} = Record,
    ?assert(VarReason =/= undefined),
    #{
        <<"reason">> => igor_json:pack(VarReason, T)
    }.

-spec forbidden_error_ex_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> forbidden_error_ex(T).

forbidden_error_ex_from_json(Json, T) ->
    VarReason = igor_json:parse(Json, <<"reason">>, T),
    #forbidden_error_ex{reason = VarReason}.

-spec not_found_error_to_json(not_found_error()) -> igor_json:json_object().

not_found_error_to_json(#not_found_error{}) -> #{}.

-spec not_found_error_from_json(igor_json:json_object()) -> not_found_error().

not_found_error_from_json(_Json) -> #not_found_error{}.

-spec internal_server_error_to_json(internal_server_error()) -> igor_json:json_object().

internal_server_error_to_json(Record) ->
    #internal_server_error{message = VarMessage} = Record,
    ?assert(VarMessage =/= undefined),
    #{
        <<"message">> => igor_json:pack(VarMessage, string)
    }.

-spec internal_server_error_from_json(igor_json:json_object()) -> internal_server_error().

internal_server_error_from_json(Json) ->
    VarMessage = igor_json:parse(Json, <<"message">>, string),
    #internal_server_error{message = VarMessage}.

-spec not_implemented_error_to_json(not_implemented_error()) -> igor_json:json_object().

not_implemented_error_to_json(Record) ->
    #not_implemented_error{message = VarMessage} = Record,
    ?assert(VarMessage =/= undefined),
    #{
        <<"message">> => igor_json:pack(VarMessage, string)
    }.

-spec not_implemented_error_from_json(igor_json:json_object()) -> not_implemented_error().

not_implemented_error_from_json(Json) ->
    VarMessage = igor_json:parse(Json, <<"message">>, string, <<"Not yet implemented">>),
    #not_implemented_error{message = VarMessage}.

