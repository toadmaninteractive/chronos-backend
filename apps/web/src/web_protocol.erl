%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.4
%% DO NOT EDIT THIS FILE - it is machine generated

-module(web_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("web_protocol.hrl").

-export([
    role_to_string/1,
    role_from_string/1,
    role_to_json/1,
    role_from_json/1,
    login_error_to_string/1,
    login_error_from_string/1,
    login_error_to_json/1,
    login_error_from_json/1,
    logout_error_to_string/1,
    logout_error_from_string/1,
    logout_error_to_json/1,
    logout_error_from_json/1,
    access_error_to_string/1,
    access_error_from_string/1,
    access_error_to_json/1,
    access_error_from_json/1,
    log_entry_order_by_to_string/1,
    log_entry_order_by_from_string/1,
    log_entry_order_by_to_json/1,
    log_entry_order_by_from_json/1,
    crash_report_order_by_to_string/1,
    crash_report_order_by_from_string/1,
    crash_report_order_by_to_json/1,
    crash_report_order_by_from_json/1,
    claims_to_json/1,
    claims_from_json/1,
    claims_guest_to_json/1,
    claims_guest_from_json/1,
    claims_web_to_json/1,
    claims_web_from_json/1,
    claims_external_to_json/1,
    claims_external_from_json/1,
    claims_zeus_to_json/1,
    claims_zeus_from_json/1,
    login_request_to_json/1,
    login_request_from_json/1,
    account_to_json/1,
    account_from_json/1,
    component_to_json/1,
    component_from_json/1,
    application_to_json/1,
    application_from_json/1,
    log_entry_to_json/1,
    log_entry_from_json/1,
    timeline_entry_to_json/1,
    timeline_entry_from_json/1,
    error_entry_to_json/1,
    error_entry_from_json/1,
    crash_report_to_json/1,
    crash_report_from_json/1
]).

-export_type([
    role/0,
    claims/0,
    claims_guest/0,
    claims_web/0,
    claims_external/0,
    claims_zeus/0,
    login_request/0,
    login_error/0,
    logout_error/0,
    access_error/0,
    account/0,
    component/0,
    application/0,
    log_entry/0,
    timeline_entry/0,
    error_entry/0,
    crash_report/0,
    log_entry_order_by/0,
    crash_report_order_by/0
]).

-type role() :: 'chronos_guest' | 'chronos_web' | 'chronos_external' | 'chronos_zeus'.
-type claims() :: web_protocol:claims_guest() | web_protocol:claims_web() | web_protocol:claims_external() | web_protocol:claims_zeus().
-type claims_guest() :: #claims_guest{}.
-type claims_web() :: #claims_web{}.
-type claims_external() :: #claims_external{}.
-type claims_zeus() :: #claims_zeus{}.
-type login_request() :: #login_request{}.
-type login_error() :: 'failure' | 'already_logged_in' | 'account_not_exists' | 'account_is_blocked' | 'account_is_deleted' | 'invalid_password'.
-type logout_error() :: 'failure' | 'not_logged_in'.
-type access_error() :: 'not_logged_in'.
-type account() :: #account{}.
-type component() :: #component{}.
-type application() :: #application{}.
-type log_entry() :: #log_entry{}.
-type timeline_entry() :: #timeline_entry{}.
-type error_entry() :: #error_entry{}.
-type crash_report() :: #crash_report{}.
-type log_entry_order_by() :: 'id' | 'timestamp'.
-type crash_report_order_by() :: 'id' | 'created_at'.

-spec role_to_string(role()) -> binary().

role_to_string(chronos_guest) -> <<"chronos_guest">>;
role_to_string(chronos_web) -> <<"chronos_web">>;
role_to_string(chronos_external) -> <<"chronos_external">>;
role_to_string(chronos_zeus) -> <<"chronos_zeus">>.

-spec role_from_string(binary()) -> role().

role_from_string(<<"chronos_guest">>) -> chronos_guest;
role_from_string(<<"chronos_web">>) -> chronos_web;
role_from_string(<<"chronos_external">>) -> chronos_external;
role_from_string(<<"chronos_zeus">>) -> chronos_zeus.

-spec role_to_json(role()) -> igor_json:json_string().

role_to_json(chronos_guest) -> <<"chronos_guest">>;
role_to_json(chronos_web) -> <<"chronos_web">>;
role_to_json(chronos_external) -> <<"chronos_external">>;
role_to_json(chronos_zeus) -> <<"chronos_zeus">>.

-spec role_from_json(igor_json:json()) -> role().

role_from_json(<<"chronos_guest">>) -> chronos_guest;
role_from_json(<<"chronos_web">>) -> chronos_web;
role_from_json(<<"chronos_external">>) -> chronos_external;
role_from_json(<<"chronos_zeus">>) -> chronos_zeus.

-spec login_error_to_string(login_error()) -> binary().

login_error_to_string(failure) -> <<"failure">>;
login_error_to_string(already_logged_in) -> <<"already_logged_in">>;
login_error_to_string(account_not_exists) -> <<"account_not_exists">>;
login_error_to_string(account_is_blocked) -> <<"account_is_blocked">>;
login_error_to_string(account_is_deleted) -> <<"account_is_deleted">>;
login_error_to_string(invalid_password) -> <<"invalid_password">>.

-spec login_error_from_string(binary()) -> login_error().

login_error_from_string(<<"failure">>) -> failure;
login_error_from_string(<<"already_logged_in">>) -> already_logged_in;
login_error_from_string(<<"account_not_exists">>) -> account_not_exists;
login_error_from_string(<<"account_is_blocked">>) -> account_is_blocked;
login_error_from_string(<<"account_is_deleted">>) -> account_is_deleted;
login_error_from_string(<<"invalid_password">>) -> invalid_password.

-spec login_error_to_json(login_error()) -> igor_json:json_string().

login_error_to_json(failure) -> <<"failure">>;
login_error_to_json(already_logged_in) -> <<"already_logged_in">>;
login_error_to_json(account_not_exists) -> <<"account_not_exists">>;
login_error_to_json(account_is_blocked) -> <<"account_is_blocked">>;
login_error_to_json(account_is_deleted) -> <<"account_is_deleted">>;
login_error_to_json(invalid_password) -> <<"invalid_password">>.

-spec login_error_from_json(igor_json:json()) -> login_error().

login_error_from_json(<<"failure">>) -> failure;
login_error_from_json(<<"already_logged_in">>) -> already_logged_in;
login_error_from_json(<<"account_not_exists">>) -> account_not_exists;
login_error_from_json(<<"account_is_blocked">>) -> account_is_blocked;
login_error_from_json(<<"account_is_deleted">>) -> account_is_deleted;
login_error_from_json(<<"invalid_password">>) -> invalid_password.

-spec logout_error_to_string(logout_error()) -> binary().

logout_error_to_string(failure) -> <<"failure">>;
logout_error_to_string(not_logged_in) -> <<"not_logged_in">>.

-spec logout_error_from_string(binary()) -> logout_error().

logout_error_from_string(<<"failure">>) -> failure;
logout_error_from_string(<<"not_logged_in">>) -> not_logged_in.

-spec logout_error_to_json(logout_error()) -> igor_json:json_string().

logout_error_to_json(failure) -> <<"failure">>;
logout_error_to_json(not_logged_in) -> <<"not_logged_in">>.

-spec logout_error_from_json(igor_json:json()) -> logout_error().

logout_error_from_json(<<"failure">>) -> failure;
logout_error_from_json(<<"not_logged_in">>) -> not_logged_in.

-spec access_error_to_string(access_error()) -> binary().

access_error_to_string(not_logged_in) -> <<"not_logged_in">>.

-spec access_error_from_string(binary()) -> access_error().

access_error_from_string(<<"not_logged_in">>) -> not_logged_in.

-spec access_error_to_json(access_error()) -> igor_json:json_string().

access_error_to_json(not_logged_in) -> <<"not_logged_in">>.

-spec access_error_from_json(igor_json:json()) -> access_error().

access_error_from_json(<<"not_logged_in">>) -> not_logged_in.

-spec log_entry_order_by_to_string(log_entry_order_by()) -> binary().

log_entry_order_by_to_string(id) -> <<"id">>;
log_entry_order_by_to_string(timestamp) -> <<"timestamp">>.

-spec log_entry_order_by_from_string(binary()) -> log_entry_order_by().

log_entry_order_by_from_string(<<"id">>) -> id;
log_entry_order_by_from_string(<<"timestamp">>) -> timestamp.

-spec log_entry_order_by_to_json(log_entry_order_by()) -> igor_json:json_string().

log_entry_order_by_to_json(id) -> <<"id">>;
log_entry_order_by_to_json(timestamp) -> <<"timestamp">>.

-spec log_entry_order_by_from_json(igor_json:json()) -> log_entry_order_by().

log_entry_order_by_from_json(<<"id">>) -> id;
log_entry_order_by_from_json(<<"timestamp">>) -> timestamp.

-spec crash_report_order_by_to_string(crash_report_order_by()) -> binary().

crash_report_order_by_to_string(id) -> <<"id">>;
crash_report_order_by_to_string(created_at) -> <<"created_at">>.

-spec crash_report_order_by_from_string(binary()) -> crash_report_order_by().

crash_report_order_by_from_string(<<"id">>) -> id;
crash_report_order_by_from_string(<<"created_at">>) -> created_at.

-spec crash_report_order_by_to_json(crash_report_order_by()) -> igor_json:json_string().

crash_report_order_by_to_json(id) -> <<"id">>;
crash_report_order_by_to_json(created_at) -> <<"created_at">>.

-spec crash_report_order_by_from_json(igor_json:json()) -> crash_report_order_by().

crash_report_order_by_from_json(<<"id">>) -> id;
crash_report_order_by_from_json(<<"created_at">>) -> created_at.

-spec claims_to_json(claims()) -> igor_json:json_object().

claims_to_json(Record) when is_record(Record, claims_guest) ->
    claims_guest_to_json(Record);
claims_to_json(Record) when is_record(Record, claims_web) ->
    claims_web_to_json(Record);
claims_to_json(Record) when is_record(Record, claims_external) ->
    claims_external_to_json(Record);
claims_to_json(Record) when is_record(Record, claims_zeus) ->
    claims_zeus_to_json(Record).

-spec claims_from_json(igor_json:json_object()) -> claims().

claims_from_json(Json) ->
    Tag = igor_json:parse(Json, <<"role">>, {custom, fun web_protocol:role_from_json/1}),
    case Tag of
        chronos_guest ->
            claims_guest_from_json(Json);
        chronos_web ->
            claims_web_from_json(Json);
        chronos_external ->
            claims_external_from_json(Json);
        chronos_zeus ->
            claims_zeus_from_json(Json)
    end.

-spec claims_guest_to_json(claims_guest()) -> igor_json:json_object().

claims_guest_to_json(#claims_guest{}) ->
    #{<<"role">> => igor_json:pack(chronos_guest, {custom, fun web_protocol:role_to_json/1})}.

-spec claims_guest_from_json(igor_json:json_object()) -> claims_guest().

claims_guest_from_json(_Json) -> #claims_guest{}.

-spec claims_web_to_json(claims_web()) -> igor_json:json_object().

claims_web_to_json(Record) ->
    #claims_web{username = Username} = Record,
    ?assert(Username =/= undefined),
    #{
        <<"role">> => igor_json:pack(chronos_web, {custom, fun web_protocol:role_to_json/1}),
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec claims_web_from_json(igor_json:json_object()) -> claims_web().

claims_web_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    #claims_web{username = Username}.

-spec claims_external_to_json(claims_external()) -> igor_json:json_object().

claims_external_to_json(Record) ->
    #claims_external{key = VarKey} = Record,
    ?assert(VarKey =/= undefined),
    #{
        <<"role">> => igor_json:pack(chronos_external, {custom, fun web_protocol:role_to_json/1}),
        <<"key">> => igor_json:pack(VarKey, string)
    }.

-spec claims_external_from_json(igor_json:json_object()) -> claims_external().

claims_external_from_json(Json) ->
    VarKey = igor_json:parse(Json, <<"key">>, string),
    #claims_external{key = VarKey}.

-spec claims_zeus_to_json(claims_zeus()) -> igor_json:json_object().

claims_zeus_to_json(Record) ->
    #claims_zeus{key = VarKey} = Record,
    ?assert(VarKey =/= undefined),
    #{
        <<"role">> => igor_json:pack(chronos_zeus, {custom, fun web_protocol:role_to_json/1}),
        <<"key">> => igor_json:pack(VarKey, string)
    }.

-spec claims_zeus_from_json(igor_json:json_object()) -> claims_zeus().

claims_zeus_from_json(Json) ->
    VarKey = igor_json:parse(Json, <<"key">>, string),
    #claims_zeus{key = VarKey}.

-spec login_request_to_json(login_request()) -> igor_json:json_object().

login_request_to_json(Record) ->
    #login_request{username = Username, password = Password} = Record,
    ?assert(Username =/= undefined),
    ?assert(Password =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"password">> => igor_json:pack(Password, string)
    }.

-spec login_request_from_json(igor_json:json_object()) -> login_request().

login_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    #login_request{username = Username, password = Password}.

-spec account_to_json(account()) -> igor_json:json_object().

account_to_json(Record) ->
    #account{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(IsBlocked =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, uint),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"username">> => igor_json:pack(Username, string),
        <<"name">> => igor_json:pack(Name, string),
        <<"email">> => igor_json:pack(Email, string),
        <<"phone">> => igor_json:pack(Phone, string),
        <<"is_blocked">> => igor_json:pack(IsBlocked, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec account_from_json(igor_json:json_object()) -> account().

account_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, uint),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Username = igor_json:parse(Json, <<"username">>, string),
    Name = igor_json:parse(Json, <<"name">>, string, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Phone = igor_json:parse(Json, <<"phone">>, string, undefined),
    IsBlocked = igor_json:parse(Json, <<"is_blocked">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #account{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec component_to_json(component()) -> igor_json:json_object().

component_to_json(Record) ->
    #component{name = Name, versions = Versions, branches = Branches} = Record,
    ?assert(Name =/= undefined),
    ?assert(Versions =/= undefined),
    ?assert(Branches =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"versions">> => igor_json:pack(Versions, {list, string}),
        <<"branches">> => igor_json:pack(Branches, {list, string})
    }.

-spec component_from_json(igor_json:json_object()) -> component().

component_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string),
    Versions = igor_json:parse(Json, <<"versions">>, {list, string}),
    Branches = igor_json:parse(Json, <<"branches">>, {list, string}),
    #component{name = Name, versions = Versions, branches = Branches}.

-spec application_to_json(application()) -> igor_json:json_object().

application_to_json(Record) ->
    #application{name = Name, components = Components} = Record,
    ?assert(Name =/= undefined),
    ?assert(Components =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"components">> => igor_json:pack(Components, {list, {custom, fun web_protocol:component_to_json/1}})
    }.

-spec application_from_json(igor_json:json_object()) -> application().

application_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string),
    Components = igor_json:parse(Json, <<"components">>, {list, {custom, fun web_protocol:component_from_json/1}}),
    #application{name = Name, components = Components}.

-spec log_entry_to_json(log_entry()) -> igor_json:json_object().

log_entry_to_json(Record) ->
    #log_entry{
        id = Id,
        app = App,
        component = Component,
        branch = Branch,
        version = Version,
        level = Level,
        timestamp = Timestamp,
        data = Data,
        message = VarMessage,
        msg_count = MsgCount,
        seq_id = SeqId
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(App =/= undefined),
    ?assert(Component =/= undefined),
    ?assert(Branch =/= undefined),
    ?assert(Version =/= undefined),
    ?assert(Level =/= undefined),
    ?assert(Timestamp =/= undefined),
    ?assert(Data =/= undefined),
    ?assert(VarMessage =/= undefined),
    ?assert(MsgCount =/= undefined),
    ?assert(SeqId =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, uint),
        <<"app">> => igor_json:pack(App, string),
        <<"component">> => igor_json:pack(Component, string),
        <<"branch">> => igor_json:pack(Branch, string),
        <<"version">> => igor_json:pack(Version, string),
        <<"level">> => igor_json:pack(Level, {custom, fun data_protocol:log_level_to_json/1}),
        <<"timestamp">> => igor_json:pack(Timestamp, {custom, fun web_types:datetime_to_text/1}),
        <<"data">> => igor_json:pack(Data, json),
        <<"message">> => igor_json:pack(VarMessage, string),
        <<"msg_count">> => igor_json:pack(MsgCount, int),
        <<"seq_id">> => igor_json:pack(SeqId, int)
    }.

-spec log_entry_from_json(igor_json:json_object()) -> log_entry().

log_entry_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, uint),
    App = igor_json:parse(Json, <<"app">>, string),
    Component = igor_json:parse(Json, <<"component">>, string),
    Branch = igor_json:parse(Json, <<"branch">>, string),
    Version = igor_json:parse(Json, <<"version">>, string),
    Level = igor_json:parse(Json, <<"level">>, {custom, fun data_protocol:log_level_from_json/1}),
    Timestamp = igor_json:parse(Json, <<"timestamp">>, {custom, fun web_types:datetime_from_text/1}),
    Data = igor_json:parse(Json, <<"data">>, json),
    VarMessage = igor_json:parse(Json, <<"message">>, string),
    MsgCount = igor_json:parse(Json, <<"msg_count">>, int),
    SeqId = igor_json:parse(Json, <<"seq_id">>, int),
    #log_entry{
        id = Id,
        app = App,
        component = Component,
        branch = Branch,
        version = Version,
        level = Level,
        timestamp = Timestamp,
        data = Data,
        message = VarMessage,
        msg_count = MsgCount,
        seq_id = SeqId
    }.

-spec timeline_entry_to_json(timeline_entry()) -> igor_json:json_object().

timeline_entry_to_json(Record) ->
    #timeline_entry{
        time_bin = TimeBin,
        num_trace = NumTrace,
        num_debug = NumDebug,
        num_info = NumInfo,
        num_notice = NumNotice,
        num_warning = NumWarning,
        num_error = NumError,
        num_fatal = NumFatal
    } = Record,
    ?assert(TimeBin =/= undefined),
    ?assert(NumTrace =/= undefined),
    ?assert(NumDebug =/= undefined),
    ?assert(NumInfo =/= undefined),
    ?assert(NumNotice =/= undefined),
    ?assert(NumWarning =/= undefined),
    ?assert(NumError =/= undefined),
    ?assert(NumFatal =/= undefined),
    #{
        <<"time_bin">> => igor_json:pack(TimeBin, {custom, fun web_types:datetime_to_text/1}),
        <<"num_trace">> => igor_json:pack(NumTrace, int),
        <<"num_debug">> => igor_json:pack(NumDebug, int),
        <<"num_info">> => igor_json:pack(NumInfo, int),
        <<"num_notice">> => igor_json:pack(NumNotice, int),
        <<"num_warning">> => igor_json:pack(NumWarning, int),
        <<"num_error">> => igor_json:pack(NumError, int),
        <<"num_fatal">> => igor_json:pack(NumFatal, int)
    }.

-spec timeline_entry_from_json(igor_json:json_object()) -> timeline_entry().

timeline_entry_from_json(Json) ->
    TimeBin = igor_json:parse(Json, <<"time_bin">>, {custom, fun web_types:datetime_from_text/1}),
    NumTrace = igor_json:parse(Json, <<"num_trace">>, int),
    NumDebug = igor_json:parse(Json, <<"num_debug">>, int),
    NumInfo = igor_json:parse(Json, <<"num_info">>, int),
    NumNotice = igor_json:parse(Json, <<"num_notice">>, int),
    NumWarning = igor_json:parse(Json, <<"num_warning">>, int),
    NumError = igor_json:parse(Json, <<"num_error">>, int),
    NumFatal = igor_json:parse(Json, <<"num_fatal">>, int),
    #timeline_entry{
        time_bin = TimeBin,
        num_trace = NumTrace,
        num_debug = NumDebug,
        num_info = NumInfo,
        num_notice = NumNotice,
        num_warning = NumWarning,
        num_error = NumError,
        num_fatal = NumFatal
    }.

-spec error_entry_to_json(error_entry()) -> igor_json:json_object().

error_entry_to_json(Record) ->
    #error_entry{count = Count, message = VarMessage} = Record,
    ?assert(Count =/= undefined),
    ?assert(VarMessage =/= undefined),
    #{
        <<"count">> => igor_json:pack(Count, int),
        <<"message">> => igor_json:pack(VarMessage, string)
    }.

-spec error_entry_from_json(igor_json:json_object()) -> error_entry().

error_entry_from_json(Json) ->
    Count = igor_json:parse(Json, <<"count">>, int),
    VarMessage = igor_json:parse(Json, <<"message">>, string),
    #error_entry{count = Count, message = VarMessage}.

-spec crash_report_to_json(crash_report()) -> igor_json:json_object().

crash_report_to_json(Record) ->
    #crash_report{
        id = Id,
        app = App,
        component = Component,
        branch = Branch,
        version = Version,
        game_engine = GameEngine,
        username = Username,
        filename = Filename,
        reason = VarReason,
        user_comment = UserComment,
        data = Data,
        created_at = CreatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(App =/= undefined),
    ?assert(Component =/= undefined),
    ?assert(Branch =/= undefined),
    ?assert(Version =/= undefined),
    ?assert(GameEngine =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(Filename =/= undefined),
    ?assert(VarReason =/= undefined),
    ?assert(Data =/= undefined),
    ?assert(CreatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, uint),
        <<"app">> => igor_json:pack(App, string),
        <<"component">> => igor_json:pack(Component, string),
        <<"branch">> => igor_json:pack(Branch, string),
        <<"version">> => igor_json:pack(Version, string),
        <<"game_engine">> => igor_json:pack(GameEngine, string),
        <<"username">> => igor_json:pack(Username, string),
        <<"filename">> => igor_json:pack(Filename, string),
        <<"reason">> => igor_json:pack(VarReason, string),
        <<"user_comment">> => igor_json:pack(UserComment, string),
        <<"data">> => igor_json:pack(Data, json),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec crash_report_from_json(igor_json:json_object()) -> crash_report().

crash_report_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, uint),
    App = igor_json:parse(Json, <<"app">>, string),
    Component = igor_json:parse(Json, <<"component">>, string),
    Branch = igor_json:parse(Json, <<"branch">>, string),
    Version = igor_json:parse(Json, <<"version">>, string),
    GameEngine = igor_json:parse(Json, <<"game_engine">>, string),
    Username = igor_json:parse(Json, <<"username">>, string),
    Filename = igor_json:parse(Json, <<"filename">>, string),
    VarReason = igor_json:parse(Json, <<"reason">>, string),
    UserComment = igor_json:parse(Json, <<"user_comment">>, string, undefined),
    Data = igor_json:parse(Json, <<"data">>, json),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    #crash_report{
        id = Id,
        app = App,
        component = Component,
        branch = Branch,
        version = Version,
        game_engine = GameEngine,
        username = Username,
        filename = Filename,
        reason = VarReason,
        user_comment = UserComment,
        data = Data,
        created_at = CreatedAt
    }.

